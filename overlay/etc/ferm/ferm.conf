# -*- mode: conf[space] -*-
#
#  Configuration file for ferm(1).
#

# We don't know which name the "user" choses for his account, so we have to use
# his UID.
def $user_uid = 1000;

# the port SSH server listens on
def $ssh_port = 22;

# the port KadNode listens on (if enabled)
def $kadnode_port = 0;

# the port Cjdns uses for UDP/IP based (Layer 3) VPN connections with other peers
def $cjdns_udp_port = 0;

# include global variables of optional zHIVErbox modules
@include @glob('ferm.d/*.global.vars');

# IPv4
domain ip {
    table filter {
        chain INPUT {
            policy DROP;

            # Established incoming connections are accepted.
            mod state state (ESTABLISHED) ACCEPT;

            # Traffic on the loopback interface is accepted.
            interface lo ACCEPT;

            # respond to ping
            proto icmp icmp-type echo-request ACCEPT;

            # remote administration via ssh
            # zHIVErbox by default has the following security meassures:
            # * SSH root login disabled
            # * only SSH public key authentication
            # * fail2ban blocks IP address after 5 failed attemts for 1 hour
            @if $ssh_port proto tcp dport $ssh_port ACCEPT;

            # allow inbound IP connection requests on the Cjdns udp port (Layer 3)
            @if $cjdns_udp_port proto udp dport $cjdns_udp_port ACCEPT;

            # KadNode as decentralized DNS alternative
            # This port needs to be open, so other KadNodes can authenticate
            # the resolved IPv4 address via the 'bob' mechanism
            @if $kadnode_port proto udp dport $kadnode_port ACCEPT;
        }

        chain OUTPUT {
            policy DROP;

            # Established outgoing connections are accepted.
            mod state state (ESTABLISHED) ACCEPT;

            # Cjdns multicast beacon on all interfaces to find other peers
            daddr 224.0.0.251 proto udp dport 5353 {
                mod owner uid-owner root ACCEPT;
            }

            # include rules of optional zHIVErbox modules that apply to all interfaces
            @include @glob('ferm.d/*.ip.filter.output.all.include');

            # White-list access to local resources
            outerface lo {
                # Related outgoing ICMP packets are accepted.
                mod state state (RELATED) proto icmp ACCEPT;

                # White-list access to Tor's default SOCKSPort
                daddr 127.0.0.1 proto tcp syn dport 9050 {
                    mod owner uid-owner _apt ACCEPT;
                    mod owner uid-owner proxy ACCEPT;
                    mod owner uid-owner nobody ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.default.socks.tor');
                }

                # White-list access to Tor's zHIVErbox apps SOCKSPort
                daddr 127.0.0.1 proto tcp syn dport 9062 {
                    mod owner uid-owner htp ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.zhiverbox.socks.tor');
                }

                # White-list access to polipo's default port for non-Socks apps
                daddr 127.0.0.1 proto tcp syn dport 8123 {
                    mod owner uid-owner proxy ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner $user_uid ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.default.httpproxy.tor');
                }

                # White-list access to Tor's control port filter (onion-grater)
                daddr 127.0.0.1 proto tcp dport 9051 {
                    mod owner uid-owner $user_uid ACCEPT;
                }

                # White-list access to Tor's ControlPort
                daddr 127.0.0.1 proto tcp dport 9052 {
                    # Needed for running the Tor control port filter (onion-grater)
                    mod owner uid-owner root ACCEPT;
                }

                # White-list access to Tor's default TransPort (raw TCP via Tor)
                daddr 127.0.0.1 proto tcp dport 9040 {
                    mod owner uid-owner $user_uid ACCEPT;
                }

                # White-list access to Cjdns' default admin port
                daddr 127.0.0.1 proto udp dport 11234 {
                    mod owner uid-owner root ACCEPT;
                    mod owner uid-owner $user_uid ACCEPT;
                }

                daddr 127.0.0.1 proto tcp syn mod multiport destination-ports (9050 9062) {
                    mod owner uid-owner $user_uid ACCEPT;
                }

                # White-list access to Tor's TransPort (raw TCP via Tor)
                daddr 127.0.0.1 proto tcp dport 9040 {
                    mod owner uid-owner $user_uid ACCEPT;
                }

                # White-list access to system DNS and Tor's DNSPort
                daddr 127.0.0.1 proto udp dport (53 5353) {
                    mod owner uid-owner $user_uid ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner _apt DROP;

                    # kadnode needs DNS to initially resolve the DTH bootstrap peers
                    @if $kadnode_port mod owner uid-owner kadnode ACCEPT;
                }

                # White-list access to local UDP ports (e.g. needed by 'dig')
                saddr 127.0.0.1 daddr 127.0.0.1 proto udp {
                    mod owner uid-owner $user_uid ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner _apt DROP;
                }

                # include rules of optional zHIVErbox modules
                @include @glob('ferm.d/*.ip.filter.output.lo.include');

            }

            # clearnet is allowed to connect to any TCP port via the
            # external interfaces (but lo is blocked so it cannot interfere
            # with Tor etc) including DNS on the LAN. UDP DNS queries are
            # also allowed.
            #outerface ! lo mod owner uid-owner clearnet {
            #    proto tcp ACCEPT;
            #    proto udp dport domain ACCEPT;
            #}

            # Tor is allowed to do anything it wants to.
            mod owner uid-owner debian-tor {
                proto tcp syn mod state state (NEW) ACCEPT;
                proto udp dport domain ACCEPT;
            }

            # Cjdns is allowed to make outbound clearnet UDP requests
            @if $cjdns_udp_port mod owner uid-owner root {
                proto udp sport $cjdns_udp_port ACCEPT;
            }

            # KadNode is allowed to make outbound clearnet UDP requests
            @if $kadnode_port mod owner uid-owner kadnode {
                proto udp sport $kadnode_port ACCEPT;
            }

            # Local network connections should not go through Tor but DNS shall be
            # rejected. (Note that we exclude the VirtualAddrNetwork used for
            # .onion:s here.)
            daddr (10.0.0.0/8 172.16.0.0/12 192.168.0.0/16) @subchain "lan" {
                proto tcp dport domain REJECT;
                proto udp dport domain REJECT;
                proto tcp dport netbios-ns REJECT;
                proto udp dport netbios-ns REJECT;
                ACCEPT;
            }

            # Everything else is logged and dropped.
            LOG log-prefix "Dropped outbound packet: " log-level debug log-uid;
            REJECT reject-with icmp-port-unreachable;
        }

        chain FORWARD {
            policy DROP;
        }
    }

    table nat {
        chain PREROUTING {
            policy ACCEPT;
        }

        chain POSTROUTING {
            policy ACCEPT;
        }

        chain OUTPUT {
            policy ACCEPT;

            # .onion mapped addresses redirection to Tor.
            # see 'man torrc' and VirtualAddrNetworkIPv4 option in torrc config file
            # default is 127.192.0.0/10
            daddr 127.192.0.0/10 proto tcp REDIRECT to-ports 9040;

            # Redirect system DNS to Tor's DNSport
            daddr 127.0.0.1 proto udp dport 53 REDIRECT to-ports 5353;
        }
    }
}

# IPv6:
domain ip6 {
    table filter {
        chain INPUT {
            policy DROP;

            # Established incoming connections are accepted.
            mod state state (ESTABLISHED) ACCEPT;

            # Traffic on the loopback interface is accepted.
            interface lo ACCEPT;

            # SLAAC (DHCPv6)
            proto icmpv6 icmpv6-type router-advertisement ACCEPT;
            proto icmpv6 icmpv6-type neighbor-advertisement ACCEPT;
            proto icmpv6 icmpv6-type neighbor-solicitation ACCEPT;
            
            # respond to ping
            proto icmpv6 icmpv6-type echo-request ACCEPT;
            
            # various useful icmpv6 messages
            proto icmpv6 icmpv6-type destination-unreachable ACCEPT;
            proto icmpv6 icmpv6-type packet-too-big ACCEPT;
            proto icmpv6 icmpv6-type time-exceeded ACCEPT;

            # remote administration via ssh
            # zHIVErbox by default has the following security meassures:
            # * SSH root login disabled
            # * only SSH public key authentication
            # * fail2ban blocks IP address after 5 failed attemts for 1 hour
            @if $ssh_port proto tcp dport $ssh_port ACCEPT;

            # allow inbound IP connection requests on the Cjdns udp port (Layer 3)
            @if $cjdns_udp_port proto udp dport $cjdns_udp_port ACCEPT;

            # KadNode as decentralized DNS alternative
            # This port needs to be open, so other KadNodes can authenticate
            # the resolved IPv6 address via the 'bob' mechanism
            @if $kadnode_port proto udp dport $kadnode_port ACCEPT;

            # include cjdns rules of optional zHIVErbox modules
            interface tun0 {
                saddr fc00::/8 {
                    @include @glob('ferm.d/*.ip6.filter.input.cjdns.include');
                }
            }
        }

        chain FORWARD {
            policy DROP;
        }

        chain OUTPUT {
            policy DROP;

            # Established outgoing connections are accepted.
            mod state state (ESTABLISHED) ACCEPT;
            
            # SLAAC (DHCPv6)
            proto icmpv6 icmpv6-type neighbor-solicitation ACCEPT;
            proto icmpv6 icmpv6-type neighbor-advertisement ACCEPT;

            # Cjdns multicast beacon on all interfaces to find other peers
            daddr (ff02::2 ff02::16) proto icmpv6 {
                 mod owner uid-owner root ACCEPT;
            }

            # include rules of optional zHIVErbox modules that apply to all interfaces
            @include @glob('ferm.d/*.ip6.filter.output.all.include');

            # White-list access to local resources
            outerface lo {
                # Related outgoing ICMP packets are accepted.
                mod state state (RELATED) proto icmpv6 ACCEPT;

                # White-list access to Tor's default SOCKSPort
                daddr ::1 proto tcp syn dport 9050 {
                    mod owner uid-owner _apt ACCEPT;
                    mod owner uid-owner proxy ACCEPT;
                    mod owner uid-owner nobody ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.default.socks.tor');
                }

                # White-list access to Tor's zHIVErbox apps SOCKSPort
                daddr ::1 proto tcp syn dport 9062 {
                    mod owner uid-owner htp ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.zhiverbox.socks.tor');
                }

                # White-list access to polipo's default port for non-Socks apps
                daddr ::1 proto tcp syn dport 8123 {
                    mod owner uid-owner proxy ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner $user_uid ACCEPT;

                    # include rules of optional zHIVErbox modules
                    @include @glob('ferm.d/*.default.httpproxy.tor');
                }

                # White-list access to system DNS and Tor's DNSPort
                daddr ::1 proto udp dport (53 5353) {
                    mod owner uid-owner $user_uid ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner _apt DROP;

                    # kadnode needs DNS to initially resolve the DTH bootstrap peers
                    @if $kadnode_port mod owner uid-owner kadnode ACCEPT;
                }

                # White-list access to local UDP ports (e.g. needed by 'dig')
                saddr ::1 daddr ::1 proto udp {
                    mod owner uid-owner $user_uid ACCEPT;
                    mod owner uid-owner nobody ACCEPT;
                    mod owner uid-owner _apt DROP;
                }

                # include rules of optional zHIVErbox modules
                @include @glob('ferm.d/*.ip6.filter.output.lo.include');
            }

            # White-list access to Cjdns/Hyperboria resources
            outerface tun0 {

                # Allow icmpv6 packets (ping6) to all Cjdns addresses
                daddr fc00::/8 proto icmpv6 {
                    mod owner uid-owner root ACCEPT;
                    mod owner uid-owner $user_uid ACCEPT;
                }

                # include rules of optional zHIVErbox modules
                @include @glob('ferm.d/*.ip6.filter.output.cjdns.include');
            }

            # Tor is allowed to do anything it wants to.
            mod owner uid-owner debian-tor {
                proto tcp syn mod state state (NEW) ACCEPT;
                proto udp dport domain ACCEPT;
            }

            # Cjdns is allowed to make outbound clearnet UDP requests
            @if $cjdns_udp_port mod owner uid-owner root {
                proto udp sport $cjdns_udp_port ACCEPT;
            }

            # KadNode is allowed to make outbound clearnet UDP requests
            @if $kadnode_port mod owner uid-owner kadnode {
                proto udp sport $kadnode_port ACCEPT;
            }

            # Everything else is logged and dropped.
            LOG log-prefix "Dropped outbound packet: " log-level debug log-uid;
            REJECT reject-with icmp6-port-unreachable;
        }
    }
}

